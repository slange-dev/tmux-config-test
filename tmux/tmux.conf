# vim:ft=conf:
#############################################
### ████████╗███╗   ███╗██╗   ██╗██╗  ██╗ ###
### ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝ ###
###    ██║   ██╔████╔██║██║   ██║ ╚███╔╝  ###
###    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗  ###
###    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗ ###
###    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝ ###
#############################################

########################################################################
# @Version       : v0.01
# @Author        : Sebastian Thies Lange
# @Contact       :
# @License       :
# @ReadMe        :
# @Copyright     : (c) 2023 Sebastian Thies Lange, Home Developments ###
# @Created       :
# @File          : .tmux.conf
# @Description   : Tmux config file
# @TODO          : Check it: From tmux 3.2, Add a default binding for button 2 to paste. (https://github.com/tmux/tmux/blob/bc4681c83d612a3d9609dd609e7d89b035b25dd5/CHANGES#L355)
# @TODO          : Check it: From tmux 3.2, Add the ability to create simple menus (https://github.com/tmux/tmux/blob/bc4681c83d612a3d9609dd609e7d89b035b25dd5/CHANGES#L621)
# @TODO          : Check it: From tmux 3.0, use {} on larger complicated nested string blocks, provided those are for > v3.0 (https://github.com/tmux/tmux/blob/c22470bd14ba1cdc523e0bfbb0180c75a9db1819/CHANGES#L3)
# @TODO          : Check it: right mouse click paste top buffer
# @TODO          : Check it: New tmux version check syntax since tmux > v2.4
# @Other         :
# @Resource      : https://github.com/slange-dev
########################################################################
# =============
# === Notes ===
# =============
#
# CTRL keys may be prefixed with ‘C-’ or ‘^’ (https://github.com/tmux/tmux/wiki/Modifier-Keys#limitations-of-ctrl-keys)
# Shift with ‘S-’ (https://github.com/tmux/tmux/wiki/Modifier-Keys#limitations-of-shift-keys)
# Alt (meta) with ‘M-’
#
# bind-key [-nr] [-N note] [-T key-table] key command [argument...] (alias: bind)
# By default (without -T), the key is bound in the prefix key table.
#
# -n is an alias for -T root.
# -r flag indicates this key may repeat, see the repeat-time option.
# -N attaches a note to the key (shown with list-keys -N)
# -T sets the client's key table
#
# Special keys
#
# Tab =
# BSpace =
# 'DC' = delete key(DEL)
# 'IC' = insert key(INS)
# Home =
# End =
#
# Prefix key is C-a (CTRL + a)

# ==========================
# === Check Tmux Version ===
# ==========================
# For version-specific commands and options see:
# https://github.com/tmux/tmux/blob/master/CHANGES
#
# New version check tmux > v2.4
# https://github.com/tmux/tmux/blob/f21cb71fbe79c8949edc3c1d300aa783382a0d77/CHANGES#L63
# The configuration file now accepts %if/%endif conditional blocks which are
# processed when it is parsed, the argument is a format string (useful with the new format comparison options).
#
# Formats now have simple comparisons:
# #{==:a,b}
# #{!=:a,b}
#
# There are the following new formats:
#  - #{version} -- the tmux server version;
#  - #{client_termtype} -- the terminal type of the client;
#  - #{client_name} -- the name of a client;
#  - #{client_written} -- the number of bytes written to the client.
#
# Check with #{version} and new syntax can check X.Xx
#
# Example:
# %if #{>=:#{version},3.3}
#   set-option -g allow-passthrough on
# %else
#   set-option -g allow-passthrough off
# %endif
#
#
# Check with TMUX_VERSION can only check XX
#
# Example:
# [ "$(echo $TMUX_VERSION)" -lt 33 ]' OR [ "$(echo $TMUX_VERSION)" -ge 33 ]'
#
#
# Save tmux version in the "TMUX_VERSION" env variable as 32 not 32a!
run-shell 'tmux set-environment -g TMUX_VERSION $(tmux -V | cut -d" " -f2 | tr -d " |\-|.|[:alpha:]")'

# ===========================
# === Check Tmux Platform ===
# ===========================
# Save OS platform in the "TMUX_PLATFORM" env variable
run-shell 'tmux set-environment -g TMUX_PLATFORM $(uname)'

# =========================
# === Terminal settings ===
# =========================
# Set the default terminal for new windows created in this session -
# the default value of the TERM environment variable.
# For tmux to work correctly, this must be set to ‘screen’, ‘tmux’ or a derivative of them.
#set-option -g default-terminal "tmux-256color"
set-option -g default-terminal "${TERM}"

# ==================
# === xterm-keys ===
# ==================
# Make XTerm key bindings work, like C-<left> for skipping left 1 word
# https://github.com/tmux/tmux/wiki/Modifier-Keys#modifiers-and-function-keys
# All tmux versions recognise this form of key,
# and tmux has sent it to application running inside by default since tmux 2.4
# In tmux < v2.4 the xterm-keys option must be enabled
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
    'set-option -g xterm-keys on'

# =================
# === Clipboard ===
# =================
# https://github.com/tmux/tmux/wiki/Clipboard#setting-the-ms-capability
#
# Ms    Store the current buffer in the host terminal's selection (clipboard).
# See the set-clipboard option above and the xterm(1) man page.
#
#
# Tmux > v2.2 and < v3.2
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ] && [ "$(echo $TMUX_VERSION)" -lt 32 ]' \
#    'set-option -ga terminal-overrides ",xterm*:Ms=\E]52;%p1%s;%p2%s\007"'

# Tmux > v3.2
# Set terminal features for terminal types read from terminfo(5)
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
#    'set-option -ga terminal-features ",xterm*:clipboard"'

# =================
# === RGB Color ===
# =================
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'set -ga terminal-overrides ",alacritty*:RGB"'

if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set -ga terminal-features ",alacritty*:RGB"'

# =================
# === TrueColor ===
# =================
# Notes:
# Tmux < v3.2 use the terminal-overrides option
#
# Tmux > v3.2 added terminal-features option
#
# TrueColor support tmux > 2.2
# https://github.com/tmux/tmux/commit/427b8204268af5548d09b830e101c59daa095df9
#
# ,*-256color*:TC Allow tmux to send 256-color to its "parent terminal",
# allowing the terminal to render colors in full.
#
# Tmux > v2.2 and < v3.2
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ] && [ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'set-option -ga terminal-overrides ",*-256color*:TC"'

# Tmux > v3.2
# Set terminal features for terminal types read from terminfo(5)
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set-option -ga terminal-features ",*-256color*:TC"'

# =========================
# === Undercurl colours ===
# =========================
#
# Tmux > v2.2 and < v3.2
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ] && [ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'set-option -ga terminal-overrides ",*:Smulx=\E[4::%p1%dm"'

# Tmux > v3.2
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set-option -ga terminal-features ",*:Smulx=\E[4::%p1%dm"'

# ==========================
# === Underscore colours ===
# ==========================
# Underscore colours
# Tmux => v3.0
# https://github.com/tmux/tmux/blob/7c30056d96689cc8a66c748e7a18e180665b7d14/CHANGES#L939
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 30 ] && [ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'set-option -ga terminal-overrides ",*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m"'

# Tmux > v3.2
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set-option -ga terminal-features ",*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m"'

# ========================
# === Scrolling issues ===
# ========================
# If you have issues scrolling with Shift-Page Up/Down in your terminal,
# the following xterm*:smcup@:rmcup@ will remove the smcup and rmcup capabilities
# for any term that reports itself as anything beginning with xterm
#
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'set-option -ga terminal-overrides ",xterm*:smcup@:rmcup@"' \
    'set-option -ga terminal-features ",xterm*:smcup@:rmcup@"'

# =====================
# === Extended keys ===
# =====================
# Tmux > v3.2 Supports extended keys
#
# xterm(1), mintty and iTerm2 currently support this
# https://github.com/tmux/tmux/wiki/Modifier-Keys#extended-keys
#
# tmux > 3.2 Supports terminal-features
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set-option -g extended-keys on; set-option -ga terminal-features ",xterm*:extkeys"'

# Extended-key format
# Tmux > v3.5
# Revamp extended keys support to more closely match xterm and support mode 2 as well as mode 1.
# This is a substantial change to key handling which changes tmux to always
# request mode 2 from parent terminal, changes to an unambiguous internal representation of keys,
# and adds an option (extended-keys-format) to control the format similar to the xterm(1) formatOtherKeys resource.
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 35 ]' \
#    'set-option -s extended-keys-format'

# ================================
# === Urxvt mouse middle click ===
# ================================
# Urxvt mouse middle click
# https://wiki.archlinux.org/title/Tmux
#set-option -ga terminal-override ',rxvt-uni*:XT:Ms=\E]52;%p1%s;%p2%s\007'

# =================================
# === NeoVim mouse cursor shape ===
# =================================
# If you use Neovim in tmux,
# you might experience a cursor problem:
# it might not change from block to pipe when you go from NORMAL Mode to INSERT Mode.
#set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# ==========================
# === Passthrough config ===
# ==========================
# Tmux > v3.3
#
# Allow programs in the pane to bypass tmux using a terminal escape sequence (\ePtmux;...\e\\).
# If set to on, passthrough sequences will be allowed only if the pane is visible.
# If set to all, they will be allowed even if the pane is invisible.
# pass "Ptmux;" escape sequences through to the terminal
#
# passthrough is turned off by default!
# https://man.archlinux.org/man/tmux.1.en#allow-passthrough
#
# # Enables ANSI pass through: tmux 3.3a fix,
# see https://github.com/tinted-theming/base16-shell/issues/1
# and https://github.com/tmux/tmux/issues/3218
#
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 33 ]' \
    'set-option -g allow-passthrough on'

# ========================
# === General settings ===
# ========================
# Set history limit
# Set the maximum number of lines held in window history.
# This setting applies only to new windows - existing
# window histories are not resized and retain the limit at the point they were created.
# NOTE: the maximum allowed limit is 32767
set-option -g history-limit 32767

# Set the number of history items to save in the history
# file for each type of command prompt.
#set-option -g prompt-history-limit 10000

# If not empty, a file to which tmux will write
# command prompt history on exit and load it from on start.
set-option -g history-file "~/.tmux/.tmux-history"

# Set buffer limit
# Set the number of buffers; as new buffers are added to the top of the stack,
# old ones are removed from the bottom if necessary to maintain this maximum length.
set-option -g buffer-limit 1000

# Set key speed rate (Allows for faster key repetition)
#
# Set the time in milliseconds for which tmux waits after
# an escape is input to determine if it is part of a function or meta key sequences.
#
# Tmux < v3.5a Default is 500 milliseconds (half a second)
#
# Tmux > v3.5a Reduce default escape-time to 10 milliseconds.
# https://github.com/tmux/tmux/blob/549c35b06165f6ae023115eb76f83f2cbf945395/CHANGES#L84
#
set-option -sg escape-time 0

# Set repeat timeout
# Allow multiple commands to be entered without pressing
# the prefix-key again in the specified time milliseconds (the default is 500) a half second.
# Whether a key repeats may be set when it is bound using the -r flag to bind-key.
# Repeat is enabled for the default keys bound to the resize-pane command.
set-option -g repeat-time 400

# Set refresh rate for display-message
# Set the amount of time for which status line messages and
# other on-screen indicators are displayed.
# If set to 0, messages and indicators are displayed until a key is pressed.
# time is in milliseconds.
set-option -g display-time 2000

# Set window rename
# Tmux > v1.9
#
# Allow programs in the pane to change the window name
# using a terminal escape sequence (\ek...\e\\).
set-window-option -g allow-rename off

# Control automatic window renaming
# When this setting is enabled,
# tmux will rename the window automatically using
# the format specified by automatic-rename-format.
#
# Tmux > v3.3 If automatic-rename is off,
# allow the rename escape sequence to set an empty name.
# https://github.com/tmux/tmux/blob/87fe00e8b44901240fc22d7120c1b31e4331f6f5/CHANGES#L67
#
set-window-option -g automatic-rename off

# The format used when the automatic-rename option is enabled.
# Tmux > v1.9 Added 'automatic-rename-format' option.
#
# allow the automatic rename mechanism to use something
# other than the default of #{pane_current_command}.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L37
#
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 19 ]' \
    'set-option -g automatic-rename-format "#I:#W #{?#{window_bell_flag},[+!],} #{?#{window_zoomed_flag},[+Z],}"'

# Set window resize
# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*.
# Much more reasonable.
set-window-option -g aggressive-resize on

# Don't exit tmux when closing a session
# [off | on | no-detached | previous | next]
# If on (the default),
# the client is detached when the session it is attached to is destroyed.
# If off,
# the client is switched to the most recently active
# of the remaining sessions.
# If no-detached,
# the client is detached only if there are no detached sessions,
# if detached sessions exist,
# the client is switched to the most recently active.
# If previous or next,
# the client is switched to the previous or next session in alphabetical order.
#set -g detach-on-destroy off

# A pane with this flag set is not destroyed when the program running in it exits.
# If set to failed, then only when the program exit status is not zero.
# The pane may be reactivated with the respawn-pane command.
# [on | off | failed]
#set-option -g remain-on-exit off

# Monitor changes on non-focus window (activity symbol = #)
# (e.g 1:zsh  2:zsh  3:torr# 4:im- 5:chat# 6:fm# 7:conf*)
# [on | off]
set-window-option -g monitor-activity on

# Displays a message at the bottom when activity is detected (e.g Activity in Window 5)
# requires: monitor-activity on
# [on | off | both]
# If on,
# display a message instead of sending a bell when
# activity occurs in a window for which the
# monitor-activity window option is enabled.
# If set to both,
# a bell and a message are produced.
set-option -g visual-activity on

# Activity action
# Tmux > v2.6?
# Set action on window activity when monitor-activity is on.
#
# activity-action [any | none | current | other]
# any means activity in any window linked to a session
# causes a bell or message (depending on visual-activity)
# in the current window of that session,
#
# none means all activity is ignored (equivalent to monitor-activity being
# off),
#
# current means only activity in windows other than
# the current window are ignored and
#
# other means activity in the current window is ignored
# but not those in other windows.
#
#set-option -g activity-action none

# Monitor for a bell in the window.
# Windows with a bell are highlighted in the status line.
# [on | off]
set-option -g monitor-bell on

# If on, a message is shown on a bell in a window
# for which the monitor-bell window option is enabled
# instead of it being passed through to the terminal (which normally  makes a sound).
# If set to both, a bell and a message are produced.
# Also see the bell-action option.
# [on | off | both]
#set-option -g visual-bell off

# > 1.5 < 2.6
# https://github.com/tmux/tmux/blob/bd71cbbe276432ce8869baa0f2d55433e1ab820c/CHANGES#L24
#<% if tmux_version < '2.6' %>
#set-option -g bell-on-alert on
#<% end %>

# Set action on a bell in a window when monitor-bell is on.
# The values are the same as those for activity-action.
# [any | none | current | other]
#set-option -g bell-action none

# If monitor-silence is enabled, prints a message after the
# interval has expired on a given window instead of sending a bell.
# If set to both, a bell and a message are produced.
# [on | off | both]
set-option -g visual-silence on

# Focus events
#
# When enabled,
# focus events are requested from the terminal if supported
# and passed through to applications running in tmux.
# Attached clients should be detached and attached again after changing this option.
#
# Changes panes can now emit focus notifications for certain applications which use those.
# https://github.com/tmux/tmux/blob/1b083aa0fd2d8ac000504488135bf58e35c3361e/CHANGES#L40
#
# focus-events [on | off]
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 18 ]' \
    'set-option -g focus-events on'

# ======================
# === Terminal title ===
# ======================
# Set terminal title
#
# Attempt to set the client terminal title using the tsl and fsl terminfo(5) entries if they exist.
# tmux automatically sets these to the \e]0;...\007 sequence if the terminal appears to be xterm(1).
# This option is off by default.
set-option -g set-titles on

# Set terminal title format
# if set-titles is on.
#
# S = Name of the Tmux session
# I = Window index number
# W = Current Tmux window name
# P = Pane index number
# pane_current_path =
# pane_current_command =
# [tmux] [session_name]:[1:window_name[1]]:[/root]:[bash]
set-option -g set-titles-string "[ TMUX ] : [ Session: #{?session_group,#{session_group}:,}#{session_id}:#S ] : [ Window: #I:#W ] : [ Pane: #P:#{@custom_pane_title} ] : [ Path: #{pane_current_path} ] : [ CMD: #{pane_current_command} ]"

# =============================
# === Window/Pane numbering ===
# =============================
# Windows numbering
# Set the base index from which an unused index should be searched when a new window is created.
# The default is zero.
set-option -g base-index 1

# Make pane numbering consistent with windows numbering
# Like base-index, but set the starting index for pane numbers.
set-window-option -g pane-base-index 1

# =====================
# === Mouse Support ===
# =====================
# All tmux version < 2.1 has the 4 mouse options:
# mouse-resize-pane
# mouse-select-pane
# mouse-select-window
# mode-mouse
# ...which turns on mouse support ( https://github.com/tmux/tmux/blob/2.1/CHANGES#L6L13 )
# All tmux versions > 2.1 was replaced the mouse options with:
# mouse on
# ...which turns on mouse support entirely (Changes from v2.1 to v2.2 ( https://github.com/tmux/tmux/blob/2.2/CHANGES#L72 ))
# Mouse support for tmux < v2.1 and > v2.1
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 21 ]' \
    'set-option -g mode-mouse on; set-option -g mouse-select-pane on; set-option -g mouse-resize-pane on; set-option -g mouse-select-window on' \
    'set-option -g mouse on'

# =====================
# === UTF 8 Support ===
# =====================
# UTF8 is autodetected in > v2.2, but errors if explicitly set
# Changes from v2.1 to v2.2, ( https://github.com/tmux/tmux/blob/2.2/CHANGES#L13 )
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 22 ]' \
    'set-option -g utf8 on; set-option -g status-utf8 on; set-option -g mouse-utf8 on'

# =============
# === Clock ===
# =============
# Clock color
set-window-option -g clock-mode-colour green

# Clock in 24 hour style
set-window-option -g clock-mode-style 24

# =======================
# Pane number display ===
# =======================
# Set the time in milliseconds for which the indicators shown by the display-panes command appear.
set-option -g display-panes-time 5000

# Set the colour used by the display-panes command to show the indicator for the active pane.
set-option -g display-panes-active-colour colour33 #blue

# Set the colour used by the display-panes command to show the indicators for inactive panes.
set-option -g display-panes-colour colour166 #orange

###########################
#Tmux > v?.?
# https://github.com/tmux/tmux/pull/4080
#

# enable scrollbars that show you the copy mode buffer in scrollback area of a pane
#set-option -g pane-scrollbars on

#
#set pane-vertical-scrollbars-position right

#
#set pane-scrollbar-style "fg=White,bg=black"

# ====================
# === Shell config ===
# ====================
# Start a non-login shell
# tmux starts a login shell by default, which may result in multiple negative side effects:
# - Users of fortune may notice that quotes are printed when creating a new panel.
# - The configuration files for login shells such as $HOME/.profile are interpreted each time a new panel is created,
# so commands intended to be run on session initialization (e.g. setting audio level) are executed.
#
# Tmux < v3.5 Use /bin/sh for command prompt, #(), run-shell, if-shell and popups.
# Tmux > v3.5 Use default-shell for command prompt, #(), run-shell, if-shell and popups.
# Tmux > v3.5a Revert to using /bin/sh for command prompt, #(), run-shell and if-shell - only popups use default-shell
# ( https://github.com/tmux/tmux/blob/549c35b06165f6ae023115eb76f83f2cbf945395/CHANGES#L7 )
#
# Set the default shell
set-option -g default-shell "${SHELL}"

# Set the default command
set-option -g default-command "${SHELL}"

# ====================
# === Key bindings ===
# ====================
# https://www.man7.org/linux/man-pages/man1/tmux.1.html
#
# The default command key bindings are:
#
# C-b         Send the prefix key (C-b) through to the application.
# C-o         Rotate the panes in the current window forwards.
# C-z         Suspend the tmux client.
# !           Break the current pane out of the window.
# "           Split the current pane into two, top and bottom.
# #           List all paste buffers.
# $           Rename the current session.
# %           Split the current pane into two, left and right.
# &           Kill the current window.
# '           Prompt for a window index to select.
# (           Switch the attached client to the previous session.
# )           Switch the attached client to the next session.
# ,           Rename the current window.
# -           Delete the most recently copied buffer of text.
# .           Prompt for an index to move the current window.
# 0 to 9      Select windows 0 to 9.
# :           Enter the tmux command prompt.
# ;           Move to the previously active pane.
# =           Choose which buffer to paste interactively from a list.
# ?           List all key bindings.
# D           Choose a client to detach.
# L           Switch the attached client back to the last session.
# [           Enter copy mode to copy text or view the history.
# ]           Paste the most recently copied buffer of text.
# c           Create a new window.
# d           Detach the current client.
# f           Prompt to search for text in open windows.
# i           Display some information about the current window.
# l           Move to the previously selected window.
# m           Mark the current pane (see select-pane -m).
# M           Clear the marked pane.
# n           Change to the next window.
# o           Select the next pane in the current window.
# p           Change to the previous window.
# q           Briefly display pane indexes.
# r           Force redraw of the attached client.
# s           Select a new session for the attached client interactively.
# t           Show the time.
# w           Choose the current window interactively.
# x           Kill the current pane.
# z           Toggle zoom state of the current pane.
# {           Swap the current pane with the previous pane.
# }           Swap the current pane with the next pane.
# ~           Show previous messages from tmux, if any.
# Page Up     Enter copy mode and scroll one page up.
# Up, Down, Left, Right
            # Change to the pane above, below, to the left,
            # or to the right of the current pane.
# M-1 to M-5
            # Arrange panes in one of the five preset
            # layouts: even-horizontal, even-vertical,
            # main-horizontal, main-vertical, or tiled.
# Space     # Arrange the current window in the next preset layout.
# M-n       # Move to the next window with a bell or activity marker.
# M-o       # Rotate the panes in the current window backwards.
# M-p       # Move to the previous window with a bell or activity marker.
# C-Up, C-Down, C-Left, C-Right
            # Resize the current pane in steps of one cell.
# M-Up, M-Down, M-Left, M-Right
            # Resize the current pane in steps of five cells.

###################################
# Unbind all default key bindings #
# unbind-key -a                   #
###################################
##     GENERAL BITS AND BOBS     ##
###################################
# unbind -T root -aq              #
# unbind -T prefix -aq            #
# unbind -T nested -aq            #
# unbind -T popup -aq             #
# unbind -T copy-mode -aq         #
###################################

# First we unbind default key bindings
unbind-key "\$" # rename-session
unbind-key ,    # rename-window
unbind-key %    # split-window -h
unbind-key '"'  # split-window
unbind-key "}"  # swap-pane -D
unbind-key "{"  # swap-pane -U
unbind-key ")"  # switch next session
unbind-key "("  # switch previous session
unbind-key [    # Enter copy mode
unbind-key ]    # Paste the most recently copied buffer of text
unbind-key "'"  # select-window
unbind-key "<"  # open menue
unbind-key ">"  # open menue
unbind-key n    # next-window
unbind-key p    # previous-window
unbind-key l    # last-window
unbind-key M-n  # next window with alert
unbind-key M-p  # next window with alert
unbind-key o    # focus thru panes
unbind-key &    # kill-window


#unbind-key "#"  # list-buffer
#unbind-key "="  # choose-buffer

unbind-key z    # zoom-pane
unbind-key M-Up  # resize 5 rows up
unbind-key M-Down # resize 5 rows down
unbind-key M-Right # resize 5 rows right
unbind-key M-Left # resize 5 rows left

#
unbind-key M-PageUp

#
unbind-key -n C-h
unbind-key C-h

# ==================
# === Prefix key ===
# ==================
# Change prefix to C-a (CTRL + a) key is easier to type
# Default key: C-b

# Unbind old prefix CTRL + b first
unbind-key C-b

# Unbind CTRL + a first
unbind-key C-a

# Change prefix to CTRL + a key
set-option -g prefix C-a

# Send CTRL + a sequence to applications by pressing it twice
bind-key -N "Send prefix" C-a send-prefix

# ================
# === Help Key ===
# ================
# List all bind keys
# Default key: ?
# PREFIX + SHIFT + ?
# unbind-key -n M-?
bind-key -n M-? list-keys

# ===================
# === Command Key ===
# ===================
# Open the tmux command line in Vim style PREFIX + : key
# PREFIX + SHIFT + :
#
# Tmux > v3.2
# Add C-g (CTRL + g) to cancel command prompt with vi keys as well as emacs, and q in command mode.
# https://github.com/tmux/tmux/blob/bc4681c83d612a3d9609dd609e7d89b035b25dd5/CHANGES#L360
#
# unbind-key :
bind-key -N "Command prompt" : command-prompt

# ===================
# === Config Keys ===
# ===================
# Edit the configuration and reload tmux with new config
# PREFIX + CTRL + e
#
# unbind-key C-e
bind-key -N "Edit & Reload tmux configuration" C-e new-window -n 'tmux.conf' 'sh -c "${EDITOR:-vim} ~/.tmux.conf && tmux source-file ~/.tmux.conf && tmux display "Tmux configuration file edited and reloaded!""'

# Reloaded tmux configuration file
# PREFIX + CTRL + r
#
# unbind-key C-r
bind-key -N "Reload tmux configuration" C-r source-file "~/.tmux.conf" \; display "Tmux configuration reloaded!"

# ====================
# === Session Keys ===
# ====================
# Create a new session in group
# Default key:
# PREFIX + s
# unbind-key s
bind-key -N "New session" s new-session

# Open session select menue
# Default key:
# PREFIX + S
# unbind-key C-s
bind-key -N "Session select menu" S choose-session -F 'session #{session_name} #{?session_attached,(attached),} : #{session_windows} windows (#{window_name} #{pane_title})' \; refresh-client -S

# With fzf finder
#bind-key S split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# With popup and fzf
#bind-key s display-popup "\
#  tmux list-sessions -F '#{?session_attached,,#{session_name}} ' |\
#  sed '/^\s*$/d' |\
#  fzf --reverse --header jump-to-session |\
#  xargs tmux switch-client -t"

# Switch to session
# Default key:
#bind-key -N "Switch to next session" n switch-client -n \; refresh-client -S
#bind-key -N "Switch to previus session" N switch-client -p \; refresh-client -S

# ===================
# === Window Keys ===
# ===================
# Create new window and retain cwd
# Default key: PREFIX + c
# ToDo: change @sidebar-tree-focus 'w'
# PREFIX + w
# unbind-key w
bind-key -N "New window" w new-window -c "#{pane_current_path}"

# Double click on the window list to open a new window
#bind-key -n DoubleClick1Status new-window

# Open windows select menue
# PREFIX + SHIFT + W
# unbind-key W
bind-key -N "Window select menu" W choose-tree -Zw

# New window at?
# PREFIX + CTRL w
# unbind-key C-w
bind-key -N "New window at:" C-w command-prompt -p 'New window at:' 'new-window -c "#{pane_current_path}" -t %1'

# Insert window at?
# PREFIX + CTRL + SHIFT + W
# unbind-key C-W
bind-key -N "Insert window at:" C-W command-prompt -p 'Insert window at:' 'new-window -c "#{pane_current_path}" -a -t %1; swap-window -t -1'

# Move window to?
# PREFIX + ALT + w
# ToDo: select menu or example
# unbind-key M-w
bind-key -N "Move window to:" M-w command-prompt -p "Move window to:" "move-window -t %%"

# Swap window with?
# PREFIX + ALT + W
# ToDo: select menu or example
# unbind-key M-W
bind-key -N "Swap window with:" M-W command-prompt -p "Swap window with:" "swap-window -t %%"

# move windows
#bind-key S-Left  swap-window -t :- \; previous-window     # move left
#bind-key S-Right swap-window -t :+ \; next-window         # move right

# Move windows (for tmux < 3.0), see: https://github.com/tmux/tmux/issues/2056
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
#   'bind-key S-Left  swap-window -t :- ; \
#    bind-key S-Right swap-window -t :+ ; \

# ===========================
# === Window reorder Keys ===
# ===========================
# Set automatic window renumbering
# Renumber windows as they are created and destroyed
set-option -g renumber-windows off

# Set reorder windows
# Default key:
# PREFIX + .
# unbind-key .
bind-key -N "Reorder windows" . move-window -r \; display-message "Windows reordered..."

# ===================
# === Rename Keys ===
# ===================
# Rename the selected session
# Default key:
# PREFIX + R
# unbind-key R
bind-key -N "Rename session" R command-prompt -p "Rename session:" -I "#{session_name}" "rename-session '%%'"

# Rename the selected window
# Default key:
# PREFIX + r
# unbind-key C-r
bind-key -N "Rename window" r command-prompt -p "Rename window:" -I "#{window_name}" "rename-window '%%'"

# Rename the selected pane
# unbind-key <
bind-key -N "Rename pane" < command-prompt -p "Rename pane:" -I "#{@custom_pane_title}" "set-option -p @custom_pane_title '%%'"

# ==================
# === Split Keys ===
# ==================

# PREFIX + | for vertical split
# unbind-key |
bind-key -N "Vertical split" | split-window -h -p 50 -c "#{pane_current_path}"

# PREFIX + - for horizontal split
# unbind-key -
bind-key -N "Horizontal split" - split-window -v -p 50 -c "#{pane_current_path}"

# PREFIX + h for horizontal split
# unbind-key h
bind-key -N "Horizontal split" h split-window -v -p 50 -c "#{pane_current_path}"

# PREFIX + v for vertical split
# unbind-key v
bind-key -N "Vertical split" v split-window -h -p 50 -c "#{pane_current_path}"

# Vertical split
# PREFIX + \
# Tmux > 3.0 has one incompatible change:
# a \ on its own must be escaped or quoted
# as either \\ or '\' (the latter works on older tmux versions).
# https://github.com/tmux/tmux/blob/c22470bd14ba1cdc523e0bfbb0180c75a9db1819/CHANGES#L16
#
# unbind-key \
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
    'bind-key -N "Vertical split" \ split-window -h -c "#{pane_current_path}"' \
    'bind-key -N "Vertical split" \\ split-window -h -c "#{pane_current_path}"'

# ========================
# === Resize Pane Keys ===
# ========================
# Use vi style key bindings
# Vi/Vim Style: h / j / k / l = left / down / up / right
# Normal pane resize with ALT + arrow keys without prefix
#
# Tmux > v3.2 Add a -T flag to resize-pane to trim lines below the cursor, moving lines out of the history.

# move left
# unbind-key M-Left
bind-key -N "Resize pane 5 rows left" -n M-Left resize-pane -L 5

# move down
# unbind-key M-Down
bind-key -N "Resize pane 5 rows down" -n M-Down resize-pane -D 5

# move up
# unbind-key M-Up
bind-key -N "Resize pane 5 rows up" -n M-Up resize-pane -U 5

# move right
# unbind-key M-Right
bind-key -N "Resize pane 5 rows right" -n M-Right resize-pane -R 5

# Vim pane resize with ALT + hjkl without prefix
# Smart pane switching with awareness of Vim, Fzf, and Telescope
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

is_telescope="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?Telescope'"

# move left
# unbind-key M-h
bind-key -N "Resize pane 5 rows left" -n M-h if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-h" "resize-pane -L 5"

# move down
# unbind-key M-j
bind-key -N "Resize pane 5 rows down" -n M-j if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-j" "resize-pane -D 5"

# move up
# unbind-key M-k
bind-key -N "Resize pane 5 rows up" -n M-k if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-k" "resize-pane -U 5"

# move right
# unbind-key M-l
bind-key -N "Resize pane 5 rows right" -n M-l if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys M-l" "resize-pane -R 5"

# Check if tmux version is <v3.0 or >v3.0
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
    #"bind-key -n 'C-\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\'  'resize-pane -l 5'" \
    #"bind-key -n 'C-\\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\\'  'resize-pane -l 5'"

# =======================
# === Break Pane Keys ===
# =======================
# Break pane out into new window
# default key: !
# PREFIX + CTRL + t
# unbind-key C-t
# key b?
bind-key -N "Break pane out" C-t break-pane -d

# ======================
# === List Pane Keys ===
# ======================
#
#bind-key Space list-panes

# ============================
# === Pane Navigation Keys ===
# ============================
# Normal pane select with CTRL + arrow keys without prefix before
#  Select left pane
bind-key -N "Select left pane" -n C-Left select-pane  -L

# Select lower pane
bind-key -N "Select lower pane" -n C-Down select-pane  -D

# Select upper pane
bind-key -N "Select upper pane" -n C-Up select-pane    -U

# Select right pane
bind-key -N "Select right pane" -n C-Right select-pane -R

# Select last pane
#bind-key -n C-\\ select-pane -l

# Smart pane switching with awareness of Vim, Fzf, and Telescope
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

is_telescope="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?Telescope'"

# Select left pane
bind-key -N "Select left pane" -n C-h if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-h" "select-pane -L"

# Select lower pane
bind-key -N "Select lower pane" -n C-j if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-j" "select-pane -D"

# Select upper pane
bind-key -N "Select upper pane" -n C-k if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-k" "select-pane -U"

# Select right pane
bind-key -N "Select right pane" -n C-l if-shell "$is_vim || $is_fzf || $is_telescope" "send-keys C-l" "select-pane -R"

# Select last pane
# -l is the same as using the last-pane(Select the last (previously selected) pane) command.
# Check if tmux version is <v3.0 or >v3.0
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 30 ]' \
    #"bind-key -n 'C-\\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\\'  'select-pane -l'" \
    #"bind-key -n 'C-\\' if-shell \"$is_vim || $is_fzf || $is_telescope\" 'send-keys C-\\\\'  'select-pane -l'"

# Switch panes while in copy mode
#bind-key -T copy-mode-vi C-h  select-pane -L
#
#bind-key -T copy-mode-vi C-j  select-pane -D
#
#bind-key -T copy-mode-vi C-k  select-pane -U
#
#bind-key -T copy-mode-vi C-l  select-pane -R
#
#bind-key -T copy-mode-vi C-\\ select-pane -l

# ======================
# === Pane join Keys ===
# ======================
# Pane movement to window

# Join pane from
#bind-key j command-prompt -p "Join pane from:"  "join-pane -s '%%'"

# Send pane to
#bind-key s command-prompt -p "Send pane to:"  "join-pane -t '%%'"

# =============================
# === Pane mark/switch Keys ===
# =============================
# Prefix + m
# mark pane

# Prefix + M
# demark pane

# Switch to marked pan back
# PREFIX + backtick
#bind \` switch-client -t '{marked}'


# ==============================
# === Window navigation Keys ===
# ==============================
# Switch windows with SHIFT + LEFT/RIGHT keys without prefix
bind-key -N "Switch to left window" -n S-Left  previous-window
bind-key -N "Switch to right window" -n S-Right next-window

# Switch to specific window with PREFIX + 0-9 keys
bind-key -N "Switch to window #1" 1 select-window -t 1
bind-key -N "Switch to window #2" 2 select-window -t 2
bind-key -N "Switch to window #3" 3 select-window -t 3
bind-key -N "Switch to window #4" 4 select-window -t 4
bind-key -N "Switch to window #5" 5 select-window -t 5
bind-key -N "Switch to window #6" 6 select-window -t 6
bind-key -N "Switch to window #7" 7 select-window -t 7
bind-key -N "Switch to window #8" 8 select-window -t 8
bind-key -N "Switch to window #9" 9 select-window -t 9
bind-key -N "Switch to last window" 0 last-window

# ================================
# === Display pane Number keys ===
# ================================
# Display the pane numbers to identify
# PREFIX + q
bind-key -N "Display pane id numbers" q display-panes

# =================
# === Zoom keys ===
# =================
# Zoom the pane
# PREFIX + z
bind-key -N "Zoom pane" z resize-pane -Z

# ============================
# === Syncronize pane keys ===
# ============================
# Synchronize all panes in a window with PREFIX + y
# bind-key y set-window-option synchronize-panes

# =================
# === Link keys ===
# =================
# Link a window from another session
# PREFIX + L
bind-key -N "Link window from (session:window)" L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# =================
# === Swap keys ===
# =================
# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
#bind-key \\ if-shell '[ #{pane_index} -eq 1 ]' \
#     'swap-pane -s "!"' \
#     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Swap pane with PREFIX + CTRL + o
bind-key -N "Swap pane" -r C-o swap-pane -D

# ===========================
# === Switch session keys ===
# ===========================
# Switch client
# Popup window, tmux > 3.2 supports display-popup
# https://github.com/tmux/tmux/blob/bc4681c83d612a3d9609dd609e7d89b035b25dd5/CHANGES#L346
# Problems with escape (\) when use 'bind-key xxxx "" '' $ ^'
# we use the new version check syntax( at tmux > v2.4) so we can use bind-key xxxx without ''
%if #{>=:#{version},3.2}
    bind-key -N "Switch session menu(with popup)" -n C-s display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
%else
    bind -N "Switch session menu(without popup)" -n C-s new-window -n "session-switcher" "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
%endif

# ==================
# === Merge keys ===
# ==================
# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)

# PREFIX + CTRL + u
bind-key -N "Merge session(by session name)" C-u command-prompt -p "Session to merge with(by session name): " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux move-window -t %%'"

# =================
# === Kill Keys ===
# =================
# ToDo: X and X for Kill Windows and for kill Panes?
# Kill pane/window/session keys

# Kill pane with "PREFIX + x"
bind-key -N "Kill pane" x confirm-before -p "kill pane: #P:#{@custom_pane_title} in window #I:#W? (y/n)" kill-pane

# Kill window with "PREFIX + X"
#bind-key X kill-window

# Which window to kill with PREFIX + X
# What windows will you kill? ex: bash, Help, htop, per names...
bind-key -N "Kill window" X command-prompt -p "Windows to kill(by name)?:" " \
    run-shell '                                             \
        for w in \$(echo %% | sort -n -r); do               \
            tmux kill-window -t \$w;                        \
        done;                                               \
    '"

# Kill all other windows otherwise the current selected
# PREFIX + CTRL + x
bind-key -N "Kill all other windows" C-x confirm-before -p "kill all windows otherwise #I:#W? (y/n)" "kill-window -a"

# Kill your Session with "PREFIX + Q"
bind-key -N "Kill session" Q confirm-before -p "kill session: #S? (y/n)" kill-session

# Kill all other session otherwise your selected one
bind-key -N "Kill all other sessions" C-Q confirm-before -p "kill all sessions otherwise #S? (y/n)" "kill-session -a"

# ===================
# === Detach Keys ===
# ===================
# Detach from session with PREFIX + d
bind-key -N "Detach client" d detach-client

# Detach all other sessions from all user with PREFIX + D
bind-key -N "Detach all other clients" D if-shell -F '#{session_many_attached}' \
    'confirm-before -p "Detach all sessions from other clients? (y/n)" "detach-client -a"' \
    'display-message "Session has only 1 client attached, can´t Detach other clients!"'

# ====================
# === Logging Keys ===
# ====================
# Logging plugin
# Toggle (start/stop) logging in the current pane.
    # Key binding: prefix + P
    # File name format: tmux-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: ~/tmux-my-session-0-1-20140527T165614.log

# Save visible text, in the current pane. Equivalent of a "textual screenshot".
    # Key binding: prefix + alt + p
    # File name format: tmux-screen-capture-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: tmux-screen-capture-my-session-0-1-20140527T165614.log

# Save complete history
# Save complete pane history to a file. Convenient if you retroactively remember you need to log/save all the work.
    # Key binding: prefix + alt + shift + p
    # File name format: tmux-history-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
    # File path: $HOME (user home dir)
    # Example file: tmux-history-my-session-0-1-20140527T165614.log
    # NOTE: this functionality depends on the value of history-limit - the number of lines Tmux keeps in the scrollback buffer. Only what Tmux kept will also be saved, to a file.
# Use set-option -g history-limit 50000 in .tmux.conf, with modern computers it is ok to set this option to a high number.

# Clear pane history
    # Key binding: prefix + alt + c
# This is just a convenience key binding.

###################################
# Save complete terminal output to a file ~/.tmux/buffer/tmux.buffer
# (prefix) + b
bind-key -N "Capture pane to file" b capture-pane -b temp-capture-buffer -S - \; save-buffer -b temp-capture-buffer "~/.tmux.buffer" \; delete-buffer -b capture-buffer

# Save complete terminal output to a file and ask for file to saved
# (prefix) + B
bind-key -N "Capture pane to file(ask for save path)" B command-prompt -I "~/.tmux.buffer" -p "Store current pane contents to file:" "capture-pane -b temp-capture-buffer -S -; save-buffer -b temp-capture-buffer %1; delete-buffer -b capture-buffer"

############################
# auto logging with hook ?
# tmux pipe-pane "cat >> ~/.tmux/logs/tmux_session_#S_#I_#P_$(date +%H:%M:%S - %d-%m-%Y ).log" 2> /dev/null

# ====================
# === Locking keys ===
# ====================
# Problems when tmux lock automaticly
# it close all windows and exit tmux
# No problems when lock manual or TMOUT is not set!
#
# https://github.com/tmux/tmux/issues/3013#issuecomment-998525569
# https://github.com/tmux/tmux/issues/3236#issuecomment-1165796285
#
# Tmux > v3.4
# Set default lock command to vlock on Linux if present at build time.

# Lock command to execute
set-option -g lock-command 'vlock -c'

# Set automatic lock after X seconds
# 0 = never, 900=15min., 1800=30min. etc.
# Set TMOUT variable from .bashrc if exist
# if not, disable automatic lock
if-shell -b '[ ! -z "${TMOUT}" ]' \
    'set-option -g lock-after-time "${TMOUT}"' \
    'set-option -g lock-after-time "0"'

# Lock the complete session
# PREFIX + l
bind-key -N "Lock session terminal" l lock-session

# ======================
# === Statusbar Keys ===
# ======================´
# ToDo: Add gnome terminal, etc
tmux_commands_with_function_keys="htop mc nvim vi vim xterm"

# Statusbar can be toggled with F7
bind-key -N "Toggle statusbar" -T root F7 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F7" "set-option -g status \; display-message 'Statusbar is now [#{?status,ON,OFF}]'"

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
# Monitor windows activity silence can be set in seconds with F8
bind-key -N "Monitor activity silence" -T root F8 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F8" "set-window-option monitor-silence 0 \; display-message 'Monitor window silence [OFF]' \; command-prompt -p 'Monitor silence: interval (s)' 'set-window-option monitor-silence %%'"

# Monitor windows activity can be shutdown with F9
#  set -w monitor-bell
#  set -w monitor-activity
#  display 'window mute #{?#{monitor-bell},off,on}'
bind-key -N "Toggle monitor activity [ON/OFF]" -T root F9 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F9" "set-window-option monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'"

# =========================
# === Mouse toggle Keys ===
# =========================
# Mouse can be toggled with F10
bind-key -N "Toggle mouse [ON/OFF]" -T root F10 \
   if-shell 'echo "#{tmux_commands_with_function_keys}" | grep -q "#{pane_current_command}"' \
      "send-keys F10" "set-option -g mouse \; display-message 'Mouse [#{?mouse,ON,OFF}]'"

# =================
# === Clipboard ===
# =================
# set-clipboard option was added in tmux 1.5.
# Tmux > v1.5 set the default to on
#
# set-clipboard external option was added in tmux 2.6.
# Tmux > v2.6 changed the default to external
#
# The difference is that "on" both makes tmux set the clipboard for the outside terminal,
# and allows applications inside tmux to set tmux's clipboard (adding a paste buffer).
#
# "external" only makes tmux set the clipboard and forbids applications inside from doing so.
#
# Gnome-terminal doesn't support setting the clipboard using xterm escape sequences
# so we should ensure the set-clipboard option is off
# if it's "on"
# tmux is trying to set the clipboard with escape sequences which conflicts with xsel (https://github.com/tmux/tmux/issues/1407)
# This option might be supported and enabled by default on iTerm2 (see set-clipboard in the tmux manual https://man7.org/linux/man-pages/man1/tmux.1.html),
# which would explain the behavior on there.
#
set-option -g set-clipboard on

# =================
# === Copy mode ===
# =================
####################
# Vi Keyboard Keys #
####################
#########
## Mode #
#########
# PREFIX + Esc = Enter copy mode
# q	= Quit copy mode

#############
## Movement #
#############
# j, k, l, h = move cursor down, up, right, left

# J = scroll down 1 line
# K = scroll up 1 line

# H = move to the top line
# M = move to the middle line
# L = move to the bottom line

# g = scroll to the top of the history
# G = scroll to the bottom of the history

# f = jump forward to the specified text
# F = jump backwards to the specified text

# CTRL + f = scroll down by one page
# CTRL + b = scroll up by one page

# 0 = jump to the start of a line
# $ = jump to end of a line
# ^ = jump to the first non-blank character off the line

# w = jump forwards to the start of a word
# W = jump forwards to the start of a word (with punctation)

# e = jump forwards to the end of a word
# E = jump forwards to the end of a word (with punctation)

# b = jump backwards to the start of a word
# B = jump backwards to the start of a word (with punctation)

# : = move the cursor to a specific line
# ALT + x = jump to the last mark

###########
## Search #
###########
# / = begins a downward search
# ? = begins a upwards search
# n	= next search match
# N = previous search match
# * = search downwards for the exact word under the cursor
# # = search upwards for the exact word under the cursor
# Esc = exit search and stay in copy mode

###########
## Select #
###########
# v = start selection (tmux default:Toggle rectangle selection mode)
# V = select complete line
# Space = start selection
# Esc = clear selection

#########
## Copy #
#########
# y = copy complete line
# Y = copy selection and stay in copy mode
# a = Append the selection to the top paste buffer and stay in copy mode
# A = Append the selection to the top paste buffer and exit copy mode
# Enter = copy selection and exit copy mode
# ToDo: D = copy from the cursor to the end of a line and exit copy mode (problem! buffer with /n)

##########
## Paste #
##########
# p = paste top buffer
# P = open buffer select menu

#########################
# Mouse Keys            #
#                       #
# Command =	Description #
#########################
## Mode

# =============================
# === Copy mode (Key style) ===
# =============================
# vim keys in copy and choose mode
set-window-option -g mode-keys vi
set-option -g status-keys vi

# ==========================
# === Copy script (Yank) ===
# ==========================
# Copy text from remote session using SSH remote tunnel and systemd service
# ( https://medium.com/hackernoon/tmux-in-practice-copy-text-from-remote-session-using-ssh-remote-tunnel-and-systemd-service-dd3c51bca1fa )
#
# Using ANSI OSC 52 escape sequence fallback for SSH support
# ( https://medium.com/free-code-camp/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b )
set-option -g @copy_use_osc52_fallback on

# Yank(Copy) script path
yank="~/.bin/tmux/yank.sh"

# ==============================
# === Copy mode (Enter/Exit) ===
# ==============================
# Enter copy mode
# default key: prefix [
# ESC
bind-key -N "Enter copy mode" -n Escape copy-mode

# Easy exit of copy mode
bind-key -N "Exit copy mode" -T copy-mode-vi Escape send -X cancel

# Disable mouse right-click to open the menu in tmux > 3.0
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 30 ]' \
    'unbind-key -T root MouseDown3Pane'

# Disable context menu in tmux >3.0
#unbind-key -n M-MouseDown3Pane
#unbind-key -n MouseDown3Pane
#unbind-key -n MouseDown3Status
#unbind-key -n MouseDown3StatusLeft

# =======================================
# === Copy mode (Scrolling keyboard ) ===
# =======================================
# Once you’re in copy mode, you can continue pressing M-Up ( ⌘↑ ) to scroll 1 line up.
# The usual PageDown and PageUp controls are available to scroll by whole screen,
# and extra M-PageDown and M-PageUp to scroll by a half of screen (really convenient).
# Note: bind-key syntax changed in v2.4 -- selection / copy / paste
# - in Tmux < v2.4 - vi-copy, emacs-copy
# - in Tmux > v2.4 - copy-mode-vi and send-keys -X, copy-mode
#
# Tmux > v1.8 Add halfpage up/down bindings to copy mode.
# https://github.com/tmux/tmux/blob/1b083aa0fd2d8ac000504488135bf58e35c3361e/CHANGES#L11
#
# Scroll up/down by 1 line, half screen and whole screen
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
   'bind-key -T vi-copy M-Up       scroll-up; \
    bind-key -T vi-copy M-Down     scroll-down; \
    bind-key -T vi-copy M-PageUp   halfpage-up; \
    bind-key -T vi-copy M-PageDown halfpage-down; \
    bind-key -T vi-copy PageDown   page-down; \
    bind-key -T vi-copy PageUp     page-up'

# in > v2.4 - copy-mode-vi and send-keys -X
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 24 ]' \
   'bind-key -T copy-mode-vi M-Up       send-keys -X scroll-up; \
    bind-key -T copy-mode-vi M-Down     send-keys -X scroll-down; \
    bind-key -T copy-mode-vi M-PageUp   send-keys -X halfpage-up; \
    bind-key -T copy-mode-vi M-PageDown send-keys -X halfpage-down; \
    bind-key -T copy-mode-vi PageDown   send-keys -X page-down; \
    bind-key -T copy-mode-vi PageUp     send-keys -X page-up'

# ===================================
# === Copy mode (Scrolling mouse) ===
# ===================================
# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
#
# First...unbind.
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
#    'unbind-key -T vi-copy WheelUpPane; \
#     unbind-key -T vi-copy WheelDownPane'

#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 24 ]' \
#    'unbind-key -T copy-mode-vi WheelUpPane; \
#     unbind-key -T copy-mode-vi WheelDownPane'

if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
   'bind-key -T vi-copy WheelUpPane   select-pane \; -N 2 scroll-up; \
    bind-key -T vi-copy WheelDownPane select-pane \; -N 2 scroll-down'

# in > v2.4 - copy-mode-vi and send-keys -X
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 24 ]' \
   'bind-key -T copy-mode-vi WheelUpPane   select-pane \; send-keys -X -N 2 scroll-up; \
    bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down'

# ==========================
# === Copy mode (Select) ===
# ==========================
# Begin selection with v in copy mode
#
# First...unbind.
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
    'unbind-key -T vi-copy v' \
    'unbind-key -T copy-mode-vi v'

if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
    'bind-key -T vi-copy v begin-selection' \
    'bind-key -T copy-mode-vi v send-keys -X begin-selection'

#bind-key -T copy-mode v send-keys -X begin-selection

# ========================
# === Copy mode (Copy) ===
# ========================
# Tmux > v2.4
# copy-pipe-and-cancel
# https://github.com/tmux/tmux/blob/f21cb71fbe79c8949edc3c1d300aa783382a0d77/CHANGES#L33
#
# First...unbind.
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 24 ]' \
    'unbind-key -T vi-copy Enter' \
    'unbind-key -T copy-mode-vi Enter'

bind-key -N "Copy selection, pipe to yank script and exit copy mode" -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"

# Copy complete line with PREFIX + y (Without in copy mode)
#bind-key y send-keys -X copy-line \;\
#    run-shell "tmux save-buffer - | $yank && tmux display-message 'Line is copy to buffer!'"

# Copy complete line with PREFIX + y
# This works with a vi-like prefix, so 3 y will copy three lines (the current line and the two below it)
bind-key -N "Copy complete line and pipe to yank script" -T copy-mode-vi y send-keys -X copy-line \;\
    run-shell "tmux save-buffer - | $yank && tmux display-message 'Line is copy to buffer!'"

# Start selection with v and copy using SHIFT + Y in copy mode
bind-key -N "Copy selection and pipe to yank script" -T copy-mode-vi Y send-keys -X copy-selection  \;\
    run-shell "tmux save-buffer - | $yank && tmux display-message 'Selection is copy to buffer!'"

# Start copy from cursor to the end of line and exit copy.mode
bind-key -N "Copy from cursor to the end of a line and pipe to yank script" -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run-shell "tmux save-buffer - | $yank && tmux display-message 'Selection is copy to buffer!'"

# Append the selection to the top paste buffer and stay in copy mode
# Tmux > v2.0
# append-selection command has been added to copy-mode
# https://github.com/tmux/tmux/blob/9a4b45dc0fdefead3fe9d471e144da78163860d0/CHANGES#L137
bind-key -N "Append selection to last buffer, pipe to yank script and stay in copy mode" -T copy-mode-vi a send-keys -X append-selection \;\
    run-shell "tmux save-buffer - | $yank && tmux display-message 'Selection is append to top buffer!'"

# Append the selection to the top paste buffer and exit copy mode
# Tmux > v2.0
# append-selection command has been added to copy-mode
# https://github.com/tmux/tmux/blob/9a4b45dc0fdefead3fe9d471e144da78163860d0/CHANGES#L137
bind-key -N "Append selection to last buffer, pipe to yank script and exit copy mode" -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run-shell "tmux save-buffer - | $yank && tmux display-message 'Selection is append to top buffer!'"

# =========================================
# === Copy mode (Select and copy mouse) ===
# =========================================
# Tmux > v2.4
# copy-pipe-and-cancel
# https://github.com/tmux/tmux/blob/f21cb71fbe79c8949edc3c1d300aa783382a0d77/CHANGES#L33

# Copy selection on drag end event and exit copy mode
bind-key -N "Copy mouse selection, pipe to yank script and exit copy mode" -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "$yank"

# Copy selection on drag end event and exit copy mode
bind-key -N "Copy mouse selection, pipe to yank script and exit copy mode" -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "$yank"

###########################################
# Select a word and copy to clipboard with
# Double left mouse click
###########################################
# Tmux > v2.4
# Support for mouse double and triple clicks
# https://github.com/tmux/tmux/blob/f21cb71fbe79c8949edc3c1d300aa783382a0d77/CHANGES#L44
# copy-pipe-and-cancel
# https://github.com/tmux/tmux/blob/f21cb71fbe79c8949edc3c1d300aa783382a0d77/CHANGES#L33

# copy-mode
bind-key -N "Copy with left mouse double clicked on a word, pipe to yank script and exit copy mode" -T copy-mode DoubleClick1Pane select-pane \; send-keys -X select-word \; send-keys -X copy-pipe-and-cancel "$yank"

# copy-mode-vi
bind-key -N "Copy with left mouse double clicked on a word, pipe to yank script and exit copy mode" -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; send-keys -X copy-pipe-and-cancel "$yank"

# (Without in copy mode)
bind-key -N "Copy with left mouse double clicked on a word, pipe to yank script and exit copy mode" -n DoubleClick1Pane select-pane \; copy-mode -M \; send-keys -X select-word \; send-keys -X copy-pipe-and-cancel "$yank"

########################################################
# Select the complete line and copy to clipboard with
# Triple left mouse click
########################################################
# Tmux > v2.4
# Support for mouse double and triple clicks
# https://github.com/tmux/tmux/blob/f21cb71fbe79c8949edc3c1d300aa783382a0d77/CHANGES#L44
# copy-pipe-and-cancel
# https://github.com/tmux/tmux/blob/f21cb71fbe79c8949edc3c1d300aa783382a0d77/CHANGES#L33

# copy-mode
bind-key -N "Copy with left mouse triple clicked on a word, pipe to yank script and exit copy mode" -T copy-mode TripleClick1Pane select-pane \; send-keys -X select-line \; send-keys -X copy-pipe-and-cancel "$yank"

# copy-mode-vi
bind-key -N "Copy with left mouse triple clicked on a word, pipe to yank script and exit copy mode" -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; send-keys -X copy-pipe-and-cancel "$yank"

# (Without in copy mode)
bind-key -N "Copy with left mouse triple clicked on a word, pipe to yank script and exit copy mode" -n TripleClick1Pane select-pane \; copy-mode -M \; send-keys -X select-line \; send-keys -X copy-pipe-and-cancel "$yank"

# ===============================
# === Copy mode (Clear mouse) ===
# ===============================
# - in < v2.4 - vi-copy
# - in > v2.4 - copy-mode-vi and send-keys -X
#               copy-mode ?
# Mouse wheel down clear the selection
bind-key -N "Clear selection with mouse wheel down in copy mode" -T copy-mode MouseDown1Pane select-pane \; send-keys -X clear-selection
bind-key -N "Clear selection with mouse wheel down in copy mode" -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection

# ==========================
# === Copy mode (Search) ===
# ==========================
# Default to incremental search in copy-mode

# Search down
bind-key -N "Search downwards in copy mode" -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""

# Search up
bind-key -N "Search upwards in copy mode" -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental "%%%""

# Search up
bind-key -N "Search upwards in copy mode" / copy-mode\; command-prompt -i -p "search up" "send -X search-backward-incremental "%%%""

# Repeat the last jump
 bind-key -N "Repeat last jump in copy mode" -T copy-mode-vi ";" send-keys -X jump-again

#############################################
# Send to tmux clipboard or system clipboard
#############################################
#bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "copy to tmux clipboard"
#
#bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "copy to system clipboard"

# ==================
# === Paste mode ===
# ==================
# Tmux v3.2 Add a default binding for button 2 to paste.

# Paste the copyed text
# PREFIX + p
bind-key -N "Paste the top buffer" p paste-buffer

# Select saved buffer to paste
# PREFIX + P
bind-key -N "Paste the buffer(with selection menu)" P choose-buffer

# PREFIX + SHIFT + #
# Default key: =
# tmux choose-buffer -t <name>
bind-key -N "Show complete buffers(with selection menu)" "#" choose-buffer

# List paste buffers
# PREFIX + SHIFT + =
# Default key: #
# Switching between Buffers by name
# If you’ve given your buffers descriptive names, you can switch between them by name.
# To see a list of all the named buffers in the current Tmux session, you can run the following command:
# tmux list-buffers | grep -Eo '\[[0-9]+\] [^ ]+' | cut -c 3-
# This command lists all the named buffers in the current Tmux session.
bind-key -N "Show complete buffers(only display)" "=" list-buffers

# Switch to the previous buffer
# prefix + PgUp - Switch to the previous buffer
#bind-key -n C-p run-shell "tmux switch-buffer -n"

# Switch to the next buffer
# prefix + PgDn - Switch to the next buffer
#bind-key -n C-n run-shell "tmux switch-buffer -p"

# Paste buffer with middle mouse click
# Delete old key binding
unbind-key MouseDown2Pane

# Bind middle mouse click to paste buffer
#
# Tmux > v1.8 Support for middle-click pasting.
# https://github.com/tmux/tmux/blob/1b083aa0fd2d8ac000504488135bf58e35c3361e/CHANGES#L18
#
bind-key -N "Paste the top buffer with mouse middle click" -n MouseDown2Pane paste-buffer

# Bind right mouse click to paste buffer
#bind-key -n MouseDown3Pane paste-buffer

# ================
# === Fzf keys ===
# ================
# fzf-locate
# Search entire file system with ALT-` key,
# will split the current window and start fzf for the entire list of files.
# The selected files will be pasted on to the original window.
# ToDo: CHeck of fzf is installed [ "$(echo $TMUX_VERSION)" -ge 32 ]
#
#bind-key -n 'M-`' run-shell "tmux split-window -p 40 'tmux send-keys -t #{pane_id} \"$(locate / | fzf -m | paste -sd\\  -)\"'"

# Own fzf-tmux popup
# Tmux > 3.2 (popup)
#
# Pass on Ctrl+Tab and Ctrl+Shift+Tab
#bind-key -n C-Tab send-keys Escape [27\;5\;9~
#bind-key -n C-S-Tab send-keys Escape [27\;6\;9~

# Tmux workspace fzf
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'bind-key -N "FZF-TMUX-WORKSPACE" Tab capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; display-popup -w 80% -h 60% -E "~/.bin/tmux/fzf/fzf-tmux-workspace"'

# Tmux < v3.2
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
#    'bind-key Tab capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; split-window -Z "~/.bin/tmux/fzf/fzf-tmux-workspace"'

# Tmux command fzf
#
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
#    'bind-key C-BSpace capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; display-popup -w 80% -h 60% -E "~/.bin/tmux/fzf/fzf-tmux"'

# Tmux < v3.2
#if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
#    'bind-key S-Tab capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; split-window -Z "~/.bin/tmux/fzf/fzf-tmux"'

# ==============
# === Popups ===
# ==============
# Tmux > v3.2 supports display-popup
# https://github.com/tmux/tmux/blob/bc4681c83d612a3d9609dd609e7d89b035b25dd5/CHANGES#L346

# Open Lazygit inside popup
# if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
#bind-key -r g display-popup -d '#{pane_current_path}' -w 90% -h 90% "lazygit -ucd ~/.config/lazygit/"

# Open Ranger inside popup
#bind-key -r f display-popup -d '#{pane_current_path}' -w 90% -h 90% "ranger"

# Create new popup scratch window
# bind-key -r w display-popup -d '#{pane_current_path}' -w 90% -h 90%

#
#bind-key h display-popup -w 90% -h 90% -E "htop"

# # POPUP SHELL
# ALT + J
# bind -n M-J display-popup -T ' +#S ' -h 60% -E show-tmux-popup.sh
#
# ALT + a
# bind-key -n M-A display-popup -E show-tmux-popup.sh
#
# ALT + s
# bind -n M-s choose-tree -Zs -f '#{?#{m:_popup_*,#S},0,1}' -O name
#
# ALT + L
# bind -T popup M-L run 'tmux move-window -a -t $TMUX_PARENT_SESSION:{next}'
#
#
# set -g popup-border-style fg=colour245 #Grey54
# set -g popup-border-lines rounded
#
# # support detaching from nested session with the same shortcut
# bind -T popup M-J detach
# bind -T popup C-o copy-mode
# bind -T popup M-c new-window -c '#{pane_current_path}'
# bind -T popup M-n next-window
# bind -T popup M-m previous-window
#
# support detaching from nested session with the same shortcut
# bind-key -T popup M-A detach-client
#


# =====================
# === App shortcuts ===
# =====================
# 'DC' = delete key(DEL)

# CTRL + DEL
bind-key -N "Htop shortcut" -n 'C-DC' new-window -n htop \; send-keys -t htop 'htop && tmux kill-window' 'Enter'

# PREFIX + DEL
bind-key -N "KeePass shortcut" 'DC' new-window -n 'keepass' \; send-keys -t 'keepass' 'keepass -d ~/.keepass/private.kdb && tmux kill-window' 'Enter'

# PREFIX + Backspace
bind-key -N "Tmux man shortcut" BSpace new-window -n 'man tmux' \; send-keys -t 'man tmux' 'man tmux && tmux kill-window' 'Enter'

# =============
# === Hooks ===
# =============
# Tmux > v2.2
# Support for hooks (internal for now),
# but hooks for the following have been implemented
# alert-bell
# alert-silence
# alert-activity
# client-attached
# client-detached
# client-resized
# pane-died
# pane-exited
#
# Tmux > v2.3
# Support for hooks on commands: 'after' and 'before' hooks.
#
# Tmux > v2.4
# set-remain-on-exit has gone -- can be achieved with hooks instead.
# Hooks: before hooks have been removed and only a selection of commands now
# have after hooks (they are no longer automatic).
# Additional hooks have been added.
#
# Tmux > v2.5
# Some new control mode notifications and corresponding hooks:
# pane-mode-changed, window-pane-changed, client-session-changed,
# session-window-changed.
#
# Tmux > v2.6
# Run alert hooks based on options rather than always, and allow further bells even if there is an existing bell.
# Add pane-set-clipboard hook.
#
# Tmux > v2.7
# Fixes for hooks at server exit.
#
# Tmux > v2.8
# Add pane focus hooks.
# Add set-hook -R to run a hook immediately.
#
# Tmux > v3.0
# Hooks are now stored in the options tree as array options, allowing them to
# have multiple separate commands. set-hook and show-hooks remain but
# set-option and show-options can now also be used (show-options will only show
# hooks if given the -H flag). Hooks with multiple commands are run in index order.
#
# Tmux > v3.0a
# Add missing option for after-kill-pane hook.
#
# Tmux > v3.2
# Add formats for after hook command arguments: hook_arguments with all the
# arguments together; hook_argument_0, hook_argument_1 and so on with
# individual arguments; hook_flag_X if flag -X is present; hook_flag_X_0,
# hook_flag_X_1 and so on if -X appears multiple times.
#
# Move specific hooks for panes to pane options and windows for window options
# rather than all hooks being session options.
# These hooks are now window options:
# window-layout-changed
# window-linked
# window-pane-changed
# window-renamed
# window-unlinked
#
# And these are now pane options:
# pane-died
# pane-exited
# pane-focus-in
# pane-focus-out
# pane-mode-changed
# pane-set-clipboard
#
# Any existing configurations using these hooks on a session rather than
# globally (that is, set-hook or set-option without -g) may need to be changed.
#
# Tmux > v3.3
# Add a client-active hook.
# Add a window-resized hook which is fired when the window is actually resized
# which may be later than the client resize.
#
# Tmux > v3.5
# Add a command-error hook when a command fails.
#
######################################################################################################################

########################################################################################################################################
# Problems with fzf-tmux-workspace
#
# Automatic prompt to rename a session right after it's created
set-hook -g after-new-session 'command-prompt -p "Rename session:" -I "#{session_name}" "rename-session '%%'"'

# Prompt to rename a window right after it's created
set-hook -g after-new-window 'command-prompt -p "Rename window:" -I "#{window_name}" "rename-window '%%'"'

# Rename hook pane after window split
set-hook -g after-split-window 'command-prompt -p "Rename pane:" -I "#{@custom_pane_title}" "set-option -p @custom_pane_title '%%'"'
#############################################################################################################################################

# Update the TERM variable of terminal emulator when creating a new session or attaching a existing session
#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ]' \
#set-hook -g client-attached 'run-shell "~/.bin/tmux/tmux-update-display.sh"'

#if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 25 ]' \
#set-hook -g client-session-changed 'run-shell "~/.bin/tmux/tmux-update-display.sh"'

# Automatically resize panes when attaching to session on two different screens
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 22 ]' \
    'set-hook -g client-resized resize-pane'

# Command error hook when a command fails
# https://github.com/tmux/tmux/blob/ac44566c9c7e3e94d23be6def4c7ae83472543f5/CHANGES#L60
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 35 ]' \
    'set-hook -g command-error "run-shell "echo Tmux command failed! >>.tmux/logging/command-errors.log""'

# =================
# === Statusbar ===
# =================
# Set statusbar on
set-option -g status on

# Set statusbar refresh intervall to 1 second
set-option -g status-interval 1

# Set statusbar position
set-option -g status-position bottom

# Set statusbar justifying position
set-option -g status-justify left

# Set left and right statusbar length
set-option -g status-left-length 35
set-option -g status-right-length 210

# =========================================
# === Statusbar themes / colors / icons ===
# =========================================
# Feel free to NOT use this variables at all (remove, rename) this are named colors, just for convenience
tm_color_orange="colour166"
tm_color_purple="colour134"
tm_color_green="colour076"
tm_color_blue="colour39"
tm_color_yellow="colour220"
tm_color_red="colour160"
tm_color_black="colour232"
tm_color_white="white"

# Define variables below Change values, but not remove/rename variables itself
tm_color_dark="$tm_color_black"
tm_color_light="$tm_color_white"
tm_color_session_text="$tm_color_blue"
tm_color_status_text="colour245"
tm_color_main="$tm_color_orange"
tm_color_secondary="$tm_color_purple"
tm_color_level_ok="$tm_color_green"
tm_color_level_warn="$tm_color_yellow"
tm_color_level_stress="$tm_color_red"
tm_color_window_off_indicator="colour088" # DarkRed
tm_color_window_off_status_bg="colour238" # Grey27
tm_color_window_off_status_current_bg="colour254" # Grey89

# Battery status settings
set-option -g @batt_icon_charge_tier8 '█'
set-option -g @batt_icon_charge_tier7 '▇'
set-option -g @batt_icon_charge_tier6 '▆'
set-option -g @batt_icon_charge_tier5 '▅'
set-option -g @batt_icon_charge_tier4 '▄'
set-option -g @batt_icon_charge_tier3 '▃'
set-option -g @batt_icon_charge_tier2 '▂'
set-option -g @batt_icon_charge_tier1 '▁'
set-option -g @batt_icon_status_charged '🔋'
set-option -g @batt_icon_status_charging '⚡'
set-option -g @batt_icon_status_discharging '👎'
set-option -g @batt_color_status_primary_charged '#3daee9'
set-option -g @batt_color_status_primary_charging '#3daee9'
set-option -g @batt_remain_short 'true'

# Sysstat "MEM", "CPU" and "SWAP" widget
set-option -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}/#{mem.total}'
set-option -g @sysstat_cpu_view_tmpl 'CPU:#[fg=#{cpu.color}]#{cpu.pused}#[default]'
set-option -g @sysstat_swap_view_tmpl 'SW:#[fg=#{swap.color}]#{swap.pused}#[default] #{swap.used}/#{swap.total}'

# Configure colors for tmux-plugin-sysstat "MEM", "CPU" and "SWAP" widget
# CPU
set-option -g @sysstat_cpu_color_low "$tm_color_level_ok"
set-option -g @sysstat_cpu_color_medium "$tm_color_level_warn"
set-option -g @sysstat_cpu_color_stress "$tm_color_level_stress"
# MEM
set-option -g @sysstat_mem_color_low "$tm_color_level_ok"
set-option -g @sysstat_mem_color_medium "$tm_color_level_warn"
set-option -g @sysstat_mem_color_stress "$tm_color_level_stress"
# SWAP
set-option -g @sysstat_swap_color_low "$tm_color_level_ok"
set-option -g @sysstat_swap_color_medium "$tm_color_level_warn"
set-option -g @sysstat_swap_color_stress "$tm_color_level_stress"
# MEM size unit
#set -g @sysstat_mem_size_unit "G"

# Prefix highlight colors
#set-option -g @prefix_highlight_prefix_prompt 'Wait'
set-option -g @prefix_highlight_output_prefix '['
set-option -g @prefix_highlight_output_suffix ']'
set-option -g @prefix_highlight_fg "$tm_color_dark"
set-option -g @prefix_highlight_bg "$tm_color_secondary"
set-option -g @prefix_highlight_show_copy_mode 'on'
set-option -g @prefix_highlight_copy_mode_attr "fg=$tm_color_dark,bg=$tm_color_secondary"
set-option -g @prefix_highlight_copy_prompt 'Copy'
set-option -g @prefix_highlight_show_sync_mode 'on'
set-option -g @prefix_highlight_sync_mode_attr "fg=$tm_color_dark,bg=$tm_color_secondary"
set-option -g @prefix_highlight_sync_prompt 'Sync'

# Prefix highlight affixes
#set-option -g @prefix_highlight_empty_has_affixes 'on'
# Note: @prefix_highlight_empty_prompt default is '' (empty char)
#set-option -g @prefix_highlight_empty_prompt '        '
#set-option -g @prefix_highlight_empty_attr 'fg=default,bg=green' # default is 'fg=default,bg=default'

# ============================
# === Statusbar appearence ===
# ============================
# Note:
# The individual -fg, -bg and -attr options have been removed in tmux v2.9
# they were superseded by -style options in tmux > v1.9.
# https://github.com/tmux/tmux/blob/cb75ec25c8f023b23aa1edd082763e1ca0f14559/CHANGES#L45
#
# The various foo-{fg,bg,attr} commands have been deprecated and replaced
# with equivalent foo-style option instead.
# Currently this is still backwards-compatible, but will be removed over time.
# https://github.com/tmux/tmux/blob/c5d2de7ec0935b77dc620dfb95a1cf03d53d1aaa/CHANGES#L23

# Status line style
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-option -g status-style "fg=$tm_color_status_text,bg=$tm_color_dark"' \
    'set-option -g status-fg "$tm_color_status_text"; set-option -g status-bg "$tm_color_dark"'

# Status line message style
# This is used for messages and for the command prompt.
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-option -g message-style "fg=$tm_color_main,bg=$tm_color_dark"' \
    'set-option -g message-fg "$tm_color_main"; set-option -g message-bg "$tm_color_dark"'

# Status line message command style
# This is used for the command prompt with vi(1) keys when in command mode.
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-option -g message-command-style "fg=$tm_color_blue,bg=$tm_color_dark"' \
    'set-option -g message-command-fg "$tm_color_blue"; set-option -g message-command-bg "$tm_color_dark"'

# Window modes style
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-option -g mode-style "fg=default,bg=$tm_color_main"' \
    'set-option -g mode-fg "default"; set-option -g mode-bg "$tm_color_main"'

# =====================
# === Window status ===
# =====================
# Window powerline seperator
separator_powerline_left=""
separator_powerline_right=""

# Window segments in status line
set-option -g window-status-separator " "

# Window status style
# tm_color_secondary ?
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g window-status-style "fg=$tm_color_status_text,bg=$tm_color_dark"' \
    'set-window-option -g window-status-fg "$tm_color_status_text"; set-window-option -g window-status-bg "$tm_color_dark"'

# Window status format
# I = Window index number
# W = Window name
# #{?#{window_zoomed_flag},[+Z],}
# #{?#{window_marked_flag},[+M],}
# #{?#{window_bell_flag},[!],}
# #{?#{window_silence_flag},[~],}
# #{?#{window_activity_flag},[#],}
# #{?#{window_last_flag},[-],}
# #{?#{window_active},[*],}

# default is #I:#W#F
set-window-option -g window-status-format "#I:#W#{?#{window_active},[*],}#{?#{window_last_flag},[-],}#{?#{window_activity_flag},[#],}#{?#{window_bell_flag},[!],}#{?#{window_zoomed_flag},[+Z],}#{?#{window_marked_flag},[+M],}#{?#{window_silence_flag},[~],}"

# Current window status style
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g window-status-current-style "fg=$tm_color_light,bold,bg=$tm_color_main"' \
    'set-window-option -g window-status-current-fg "$tm_color_light"; set-window-option -g window-status-current-attr bold; set-window-option -g window-status-current-bg "$tm_color_main"'

# Current window status format
set-window-option -g window-status-current-format "#[fg=$tm_color_dark,bg=$tm_color_main]$separator_powerline_right#[default]#I:#W#{?#{window_active},[*],}#{?#{window_last_flag},[-],}#{?#{window_activity_flag},[#],}#{?#{window_bell_flag},[!],}#{?#{window_zoomed_flag},[+Z],}#{?#{window_marked_flag},[+M],}#{?#{window_silence_flag},[~],}#[fg=$tm_color_main,bg=$tm_color_dark]$separator_powerline_right#[default]"

##############################################################################
# When window has monitoring notification
#set-window-option -g window-status-activity-style "blink"
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g window-status-activity-style "fg=$tm_color_main"' \
    'set-window-option -g window-status-activity-fg "$tm_color_main"'

# Alert
# Alerted window in status bar.
# Windows which have an alert (bell, activity or content).
#set-window-option -g window-status-alert-fg red
#set-window-option -g window-status-alert-bg white

# bell window status
# bell colors (bell symbol = !)
# to simulate a bell alert use: sleep 3 && echo -e "\a"
set-window-option -g window-status-bell-style 'fg=yellow,bg=red,bold'

# tmux < v2.9?
#set-window-option -g window-status-bell-attr bold
#set-window-option -g window-status-bell-fg yellow
#set-window-option -g window-status-bell-bg red

# ==========================
# === Pane border status ===
# ==========================
# Tmux > v2.3
# https://github.com/tmux/tmux/blob/52869ed182482c26163799a7215139f4d81b6fca/CHANGES#L11
# Pane border format
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 23 ]' \
    'set-option -g pane-border-status top; set-option -g pane-border-format " [ Session: #{?session_group,#{session_group}:,}#{session_id}:#S ] [ Window: #I:#W ] [ Pane: #P:#{@custom_pane_title} ] [ Path: #{pane_current_path} ] [ CMD: #{pane_current_command} ] ";'

# Pane border
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g pane-border-style "fg=$tm_color_white"' \
    'set-window-option -g pane-border-fg "$tm_color_white"'

# Active pane border
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 29 ]' \
    'set-window-option -g pane-active-border-style "fg=$tm_color_main"' \
    'set-window-option -g pane-active-border-fg "$tm_color_main"'

# =========================
# === Statusbar widgets ===
# =========================
# Define widgets we're going to use in status bar (Note: That this is not the complete list, some of them are loaded from plugins)
#
# ToDo: Statusbar #{?#{window_silence_flag},[+~],}
#
# Session info
# #{?#{N/s:_popup_#S},+, }#S │ #h │ %H:%M '
#
# if session_group display
#
wg_session="#[fg=$tm_color_session_text]#{?session_group,[#{session_group}]:,}[#{session_id}:#S]#[default]"

# Date
wg_date="#[fg=$tm_color_dark,reverse,bg=white]%a %d-%m-%Y %H:%M:%S#[default]"

# Host info
wg_host="#[fg=$tm_color_dark,reverse,bg=white]#H#[default]"

# Zoomed
wg_is_zoomed="#[fg=$tm_color_dark,bg=$tm_color_secondary]#{?window_zoomed_flag,[Zoomed],}#[default]"

# Marked
wg_is_marked="#[fg=$tm_color_dark,bg=$tm_color_secondary]#{?window_marked_flag,[Marked],}#[default]"

# Silence
wg_is_silence="#[fg=$tm_color_dark,bg=$tm_color_secondary]#{?window_silence_flag,[Silent],}#[default]"

# SSH info
wg_is_ssh="#[fg=$tm_color_dark,reverse,bg=red][SSH] on#[default]"

# Local info
wg_is_local="#[fg=$tm_color_dark,reverse,bg=green][LOCAL] on#[default]"

# Local ipv4 address
wg_local_ip4="#[fg=$tm_color_dark,reverse,bg=cyan]#(hostname -I | cut -d \" \" -f 1)#[default]"

# Local ipv6 address
wg_local_ip6="#[fg=$tm_color_dark,reverse,bg=cyan]#(hostname -I | cut -d % -f 1)#[default]"

# Public ip address
wg_public_ip="#[fg=$tm_color_dark,reverse,bg=cyan]#{ip_address}#[default]"

# VPN tunnel
wg_vpn="#([ ! -z $(ip a | egrep 'eth[0-9]|enp[0-9]s[0-9]|ppp[0-9]|tun[0-9]' -A 2 | awk '/inet /{printf $2}') ] && echo $(ip a | egrep 'eth[0-9]|enp[0-9]s[0-9]|ppp[0-9]|tun[0-9]' -A 2 | awk '/inet /{printf \"[VPN] \"$2}'))"

# Keyboard info
wg_keyboard="#[fg=colour184]#(localectl status | grep Layout | awk '{ print $3 }')#[default]"

# Show if Capslock is pressed
wg_caps="#(if [ -e $(find /sys/class/leds -name "*capslock"|head -1)/brightness ] && [ $(cat $(find /sys/class/leds -name "*capslock"|head -1)/brightness) != 0 ]; then printf '#[fg=colour184][Caps]#[default]'; fi )"

# Show if Numlock is enabled
wg_num="#(if [ -e $(find /sys/class/leds -name "*numlock"|head -1)/brightness ] && [ $(cat $(find /sys/class/leds -name "*numlock"|head -1)/brightness) != 0 ]; then printf '#[fg=colour184][Num]#[default]'; fi )"

# Baterry info
# | [Bat] $wg_battery
wg_battery="#{battery_status_bg} #{battery_icon} #{battery_percentage} #{battery_remain}#[default]"

# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$tm_color_light,bg=$tm_color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'Keymapping is OFF on' #H)#[default]"

# ==============================
# === Statusbar widget order ===
# ==============================
# Set the left statusbar
set-option -g status-left "❐ $wg_session"

# Set the right statusbar
set-option -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed $wg_is_marked $wg_is_silent | #{sysstat_cpu} #{sysstat_loadavg} | #{sysstat_mem} | #{sysstat_swap} | $wg_is_local $wg_host | [Lan] $wg_local_ip4 | $wg_vpn | [Pub] $wg_public_ip | [Key] $wg_keyboard | $wg_date"

# ====================================
# === Renew environments variables ===
# ====================================
# Update the TERM variable of terminal emulator when creating a new session or attaching a existing session
set-option -g update-environment 'DISPLAY KRB5CCNAME SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION SSH_TTY WINDOWID XAUTHORITY TERM DBUS_SESSION_BUS_ADDRESS'

# Execute the renew env script with PREFIX + $
# ToDo: problem with $ key double use
bind-key '$' run-shell "~/.bin/tmux/renew_env.sh"

# ===============
# === Plugins ===
# ===============
# Check if tpm(Tmux plugin manager) is installed otherwise install it
if-shell "test ! -d ~/.tmux/plugins/tpm" \
    "run-shell 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Set Tmux Plugin Manager
set-option -g @plugin 'tmux-plugins/tpm'

# Set prefix highlighted status plugin
# for highlighting pressed keys in tmux
set-option -g @plugin 'slange-dev/tmux-prefix-highlight'

# Sysstat Status plugin for CPU, CPU Average, MEM, MEM Total, Swap
set-option -g @plugin 'slange-dev/tmux-plugin-sysstat'

# Shows public IP Address on the status bar
set-option -g @plugin 'slange-dev/tmux-ip-address'
# PREFIX + SHIFT + N
set-option -g @ip_address_refresh_key 'N'

# Display Plugin
# The problem:
# When you ssh -X into a machine and attach to an existing tmux session, the session contains the old $DISPLAY env variable.
# In order the x-server/client to work properly, you have to update $DISPLAY after connection.
# For example, the old $DISPLAY=:0 and you need to change to DISPLAY=localhost:10.0 for the ssh session to perform x-forwarding properly.
# The solution:
# When attaching to tmux session, update $DISPLAY for each tmux pane in that session This is performed by using tmux send-keys to the shell.
# This script handles updating $DISPLAY within vim also.
#set-option -g @plugin 'slange-dev/tmux-update-display'

# For zsh users to update $DISPLAY silently
#set-option -g @plugin 'zsh-renew-tmux-env'

# Logging Plugin
#set-option -g @plugin 'slange-dev/tmux-logging'
#set-option -g @logging-path "~/.tmux/.logging"
#set-option -g @save-complete-history-path "~/.tmux/.history"
#set-option -g @screen-capture-path "~/.tmux/.screen-snippets"

# Tmux Fzf Plugin
# CopyQ (optional): Access system clipboard, fallback to builtin tmux buffers if copyq is not executable,
# pstree (optional): Display process tree.
set-option -g @plugin 'slange-dev/tmux-fzf'

# Open fzf menue with PREFIX + CTRL + f
TMUX_FZF_LAUNCH_KEY="C-f"

# Default value in tmux < 3.2 "-m"
# Default value in tmux >= 3.2 "-p -w 62% -h 38% -m --border=none"
if-shell -b '[ "$(echo $TMUX_VERSION)" -lt 32 ]' \
    'TMUX_FZF_OPTIONS="-m"' \
    'TMUX_FZF_OPTIONS="-p -w 62% -h 38% -m --border=none"'

# Fzf preview
TMUX_FZF_PREVIEW=1

# With "follow" = 1,
# preview window will automatically scroll to the bottom.
TMUX_FZF_PREVIEW_FOLLOW=0

# Fzf menue order
TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"

# Similarly, TMUX_FZF_WINDOW_FORMAT and TMUX_FZF_SESSION_FORMAT can also be handled in this way.
TMUX_FZF_PANE_FORMAT="[#{window_name}] #{pane_current_command}  [#{pane_width}x#{pane_height}] [history #{history_size}/#{history_limit}, #{history_bytes} bytes] #{?pane_active,[active],[inactive]}"

# By default, the current session, window, and pane, are not listed among the switch possibilities.
# To include it, set:
TMUX_FZF_SWITCH_CURRENT=1

# Tmux Fzf url Plugin
set-option -g @plugin 'slange-dev/tmux-fzf-url'
set-option -g @fzf-url-bind 'u'
set-option -g @fzf-url-history-limit '2000'
# simple example for capturing files like 'abc.txt'
#set-option -g @fzf-url-extra-filter 'grep -oE "\b[a-zA-Z]+\.txt\b"'
set-option -g @fzf-url-open "firefox"

# Open tmux-fzf-url in a tmux > 3.2 popup
if-shell -b '[ "$(echo $TMUX_VERSION)" -ge 32 ]' \
    'set-option -g @fzf-url-fzf-options "-w 50% -h 50% --multi -0 --no-preview --no-border"' # --border=sharp

# Sidebar Plugin
#set-option -g @plugin 'slange-dev/tmux-sidebar'
#set-option -g @sidebar-tree 'e'
#set-option -g @sidebar-tree-focus 'w'
#set-option -g @sidebar-tree-position 'right'
#set-option -g @sidebar-tree-width '40'
#set-option -g @sidebar-tree-command 'tree -C'
#set-option -g @sidebar-tree-pager 'view -'

# Notify Plugin
# prefix + m: Start monitoring a pane and notify when it finishes.
# prefix + alt + m: Start monitoring a pane, return it in focus and notify when it finishes.
# prefix + M: Cancel monitoring of a pane.
#set-option -g @plugin 'slange-dev/tmux-notify'
#set-option -g @tnotify-verbose 'on'

# To change the verbose notification text
#set-option -g @tnotify-verbose-msg 'Tmux pane task completed!'
#set-option -g @tnotify-sleep-duration 'desired duration'

# Tmux menues Plugin
#set-option -g @plugin 'jaclu/tmux-menus'
#set-option -g @menus_trigger 'F1'
#set-option -g @menus_without_prefix 1
#set-option -g @menus_location_x 'C'
#set-option -g @menus_location_y 'C'

#bind-key -n M-q display-menu -x W -y S \
#    "New Session"                        S "command-prompt -p \"New Session:\" \"new-session -A -s '%%'\"" \
#    "Kill Session"                       x "kill-session" \
#    "Kill Other Session(s)"              X "kill-session -a" \
#    "" \
#    "New Window"                         ␍ new-window \
#    "Kill Window"                        k "killw"  \
#    "Choose Window"                      w choose-window \
#    "Previous Window"                    🡠 previous-window \
#    "Next Window"                        🡢 next-window \
#    "Swap Window Right"                  ↑ "swap-window -t -1" \
#    "Swap Window Left"                   ↓ "swap-window -t +1" \
#    "Horizontal Split"                   v "split-window -h" \
#    "Vertical Split"                     s "split-window -v"  \
#    "" \
#    "Layout Horizontal"                  h "select-layout even-horizontal"  \
#    "Layout Vertical"                    k "select-layout even-horizontal"  \
#    "" \
#    "Swap Pane Up"                       < "swap-pane -U" \
#    "Swap Pane Down"                     > "swap-pane -D" \
#    "Break Pane"                         t break-pane \
#    "Join Pane"                          j "choose-window 'join-pane -h -s \"%%\"'" \
#    "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

# Split status bar plugin
# Split into two parts : window + status-left/status-right, requires tmux version ~> 3.0
# limitation : this line must behind theme / status-left / status-right (either plugin way or directly setup above)
#if-shell -b '[ "$(echo $TMUX_VERSION > 3.0" | bc)" = 1 ]' \
set-option -g @plugin 'slange-dev/tmux-split-statusbar'

# [ on | off]
set-option -g @split-statusbar-mode 'on'

# [ M-s | -n F6 ] , this is for toggle statusbar-mode, define yourself just like bind-key
set-option -g @split-statusbar-bindkey '-n F6'

# [ M-s | -n F5 ] , this is the toggle for status-left / status-right hiding, define yourself just like bind-key
set-option -g @split-status-hide-bindkey '-n F5'

# Battery Plugin
set-option -g @plugin 'slange-dev/tmux-battery'

# ============================================
# === Nesting local and remote ssh sessions ==
# ============================================
# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is:
# to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session.
# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Session is considered to be remote when we ssh into host
if-shell 'test -n "${SSH_CLIENT}"' \
    'source-file "~/.tmux.remote.conf"'

# Also, change some visual styles when window keys are off
# Key F12 ON
#bind-key -T nested F12  \
bind-key -T root F12 \
    set-option prefix None \;\
    set-option key-table off \;\
    set-option status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set-option window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set-option window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if-shell -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

# Key F12 OFF
#bind-key -T nested_off F12  \
bind-key -T off F12 \
  set-option -u prefix \;\
  set-option -u key-table \;\
  set-option -u status-style \;\
  set-option -u window-status-current-style \;\
  set-option -u window-status-current-format \;\
  refresh-client -S

# Run all plugins scripts
run-shell '~/.tmux/plugins/tpm/tpm'
